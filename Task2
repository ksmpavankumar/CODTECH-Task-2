module spi_master (
    input clk,                // System clock
    input reset,              // Reset signal
    input [7:0] data_in,      // Data to transmit (MOSI)
    input start,              // Start transmission
    output reg sclk,          // SPI Clock
    output reg mosi,          // Master Out Slave In
    input miso,               // Master In Slave Out
    output reg ss,            // Slave Select (active low)
    output reg [7:0] data_out,// Received data (MISO)
    output reg done           // Transmission complete signal
);

    reg [2:0] bit_cnt;        // Counter for 8 bits
    reg [7:0] shift_reg;      // Data shift register
    reg [7:0] miso_reg;       // MISO data shift register
    reg state;                // FSM state
    parameter IDLE = 1'b0, TRANSFER = 1'b1;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            sclk <= 1;
            ss <= 1;         // Slave select high (inactive)
            done <= 0;
            bit_cnt <= 0;
            shift_reg <= 0;
            miso_reg <= 0;
        end else begin
            case (state)
                IDLE: begin
                    sclk <= 1;
                    ss <= 1; // Inactive SS
                    done <= 0;
                    if (start) begin
                        ss <= 0; // Activate slave
                        shift_reg <= data_in; // Load data to be transmitted
                        state <= TRANSFER;
                        bit_cnt <= 0;
                    end
                end
                TRANSFER: begin
                    sclk <= ~sclk; // Toggle clock
                    if (!sclk) begin
                        mosi <= shift_reg[7]; // Send MSB first on MOSI
                        shift_reg <= shift_reg << 1; // Shift left
                        miso_reg <= {miso_reg[6:0], miso}; // Read MISO bit
                        bit_cnt <= bit_cnt + 1;
                        if (bit_cnt == 7) begin
                            state <= IDLE;
                            ss <= 1; // Deactivate slave
                            data_out <= miso_reg; // Store received data
                            done <= 1;
                        end
                    end
                end
            endcase
        end
    end
endmodule

module spi_master_tb;

    reg clk;
    reg reset;
    reg start;
    reg miso;
    reg [7:0] data_in;
    wire sclk;
    wire mosi;
    wire ss;
    wire [7:0] data_out;
    wire done;

    // Instantiate the SPI master
    spi_master uut (
        .clk(clk),
        .reset(reset),
        .data_in(data_in),
        .start(start),
        .sclk(sclk),
        .mosi(mosi),
        .miso(miso),
        .ss(ss),
        .data_out(data_out),
        .done(done)
    );

    // Clock generation
    always #5 clk = ~clk;  // 100 MHz clock

    initial begin
        clk = 0;
        reset = 1;
        start = 0;
        data_in = 8'h0;
        miso = 0;

        // Apply reset
        #10 reset = 0;

        // Start SPI transmission
        #10 data_in = 8'hA5;  // Data to transmit
        start = 1;
        #10 start = 0;

        // Simulate slave response on MISO
        forever #10 miso = ~miso;  // Toggle MISO bit every clock cycle

        // Wait for transmission to complete
        wait (done);

        // Check the received data
        if (data_out == 8'hA5)
            $display("Test Passed: Correct data received.");
        else
            $display("Test Failed: Data mismatch.");

        // End simulation
        #50 $finish;
    end

endmodule
